// Code generated by gowsdl DO NOT EDIT.

package soap

import (
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

// Numero de factura
type InvoiceNumberType string

// NIT
type NitType string

type EnvioFacturaElectronica struct {
	XMLName xml.Name `xml:"http://www.dian.gov.co/servicios/facturaelectronica/ReportarFactura EnvioFacturaElectronicaPeticion"`

	NIT *NitType `xml:"NIT,omitempty"`

	InvoiceNumber *InvoiceNumberType `xml:"InvoiceNumber,omitempty"`

	IssueDate time.Time `xml:"IssueDate,omitempty"`

	//
	// Fichero de factura (solo una factura, en formato XML)
	//
	Document []byte `xml:"Document,omitempty"`
}

type AcuseRecibo struct {
	XMLName xml.Name `xml:"http://www.dian.gov.co/servicios/facturaelectronica/ReportarFactura EnvioFacturaElectronicaRespuesta"`

	//
	// Relaciona cada factura recibida.
	//
	ReceivedInvoice *ReceivedInvoice `xml:"ReceivedInvoice,omitempty"`

	//
	// La versión del formate de acuse de recibo.
	//
	Version string `xml:"Version,omitempty"`

	//
	// Fecha y hora en que se recibe el documento.
	//
	ReceivedDateTime time.Time `xml:"ReceivedDateTime,omitempty"`

	//
	// Fecha y hora en que se crea el acuse de recibo
	//
	ResponseDateTime time.Time `xml:"ResponseDateTime,omitempty"`

	//
	// El código de respuesta, puede incluir mensajes
	// de error de validación estructural.
	//
	Response int32 `xml:"Response,omitempty"`

	//
	// Espacio para comentarios
	//
	Comments string `xml:"Comments,omitempty"`
}

type ReceivedInvoice struct {
	NumeroFactura *InvoiceNumberType `xml:"NumeroFactura,omitempty"`

	//
	// El identificador universal de la factura.
	//
	UUID string `xml:"UUID,omitempty"`

	// El código de respuesta, puede
	// incluir mensajes de error de validación estructural.
	//
	Response int32 `xml:"Response,omitempty"`

	// Espacio para comentarios
	//
	Comments string `xml:"Comments,omitempty"`
}

type FacturaElectronicaPortName interface {
	EnvioFacturaElectronica(request *EnvioFacturaElectronica) (*AcuseRecibo, error)
}

type facturaElectronicaPortName struct {
	client *soap.Client
}

func NewFacturaElectronicaPortName(client *soap.Client) FacturaElectronicaPortName {
	return &facturaElectronicaPortName{
		client: client,
	}
}

func (service *facturaElectronicaPortName) EnvioFacturaElectronica(request *EnvioFacturaElectronica) (*AcuseRecibo, error) {
	response := new(AcuseRecibo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
